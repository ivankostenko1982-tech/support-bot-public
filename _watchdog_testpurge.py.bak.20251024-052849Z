async def _notify_admins_once(bot, m, until):
    """
    Notify admins about FIRST deletion in newcomer window (once per user/chat).
    ASCII-only text to avoid Unicode surrogate issues.
    """
    try:
        import os, time, logging
        log = logging.getLogger("support-join-guard")

        if not _flag("NEWCOMER_NOTIFY_TO_CHAT"):
            return

        cid = int(getattr(getattr(m, "chat", None), "id", 0) or 0)
        uid = int(getattr(getattr(m, "from_user", None), "id", 0) or 0)
        mid = int(getattr(m, "message_id", 0) or 0)

        # in-memory one-shot cache
        if getattr(_notify_admins_once, "_cache", None) is None:
            _notify_admins_once._cache = set()
        key = f"{cid}:{uid}"
        if key in _notify_admins_once._cache:
            return

        # parse ADMIN_IDS env safely
        raw = (os.getenv("ADMIN_IDS", "") or "").strip()
        admins = []
        for part in raw.replace(",", " ").split():
            part = part.strip()
            if part.isdigit():
                admins.append(int(part))

        log.info("TESTPURGE: notify start cid=%s uid=%s mid=%s admins=%s until=%s",
                 cid, uid, mid, admins, until)

        if not admins:
            log.info("TESTPURGE: notify no admins configured")
            return

        # strictly ASCII message
        txt = (
            "Newcomer message was deleted\n"
            f"chat: {cid}\n"
            f"user: {uid}\n"
            f"msg_id: {mid}\n"
            f"window until: {until}"
        )

        sent = 0
        for aid in admins:
            try:
                await bot.send_message(chat_id=aid, text=txt, disable_notification=True)
                sent += 1
            except Exception as e:
                try:
                    log.warning("TESTPURGE: notify fail admin=%s cid=%s uid=%s err=%r", aid, cid, uid, e)
                except Exception:
                    pass

        if sent > 0:
            _notify_admins_once._cache.add(key)
        else:
            log.info("TESTPURGE: notify no-sends cid=%s uid=%s", cid, uid)

    except Exception as e:
        try:
            log.warning("TESTPURGE: notify exception err=%r", e)
        except Exception:
            pass
async def _can_delete(bot, chat_id: int) -> bool:
    try:
        me = await bot.get_chat_member(chat_id, (await bot.me()).id)
        # aiogram v3: attributes are similar; check both generic admin & flag
        st = getattr(me, "status", None)
        can = bool(getattr(me, "can_delete_messages", False))
        return bool(st in {"administrator", "creator"} and (can or True))
    except Exception:
        log.exception("TESTPURGE: cannot inspect delete rights chat=%s", chat_id)
        return False

def _make_handler(TEST_CHAT_ID: int, TEST_USER_ID: int):
    async def _purge(m: "types.Message"):
        # Probe
        log.info(
            "TESTPURGE: probe(entry) mid=%s uid=%s chat=%s",
            getattr(m, "message_id", None),
            getattr(getattr(m, "from_user", None), "id", None),
            getattr(getattr(m, "chat", None), "id", None),
        )

        # Sanity
        if not (m and m.chat and m.from_user):
            log.info("TESTPURGE: skip(reason=no_message_or_user_or_chat)")
            return

        # test-only gate
        if not _flag("NEWCOMER_TEST_ONLY"):
            log.info("TESTPURGE: skip(reason=test_only_flag_off)")
            return

        # pair check
        if int(m.chat.id) != int(TEST_CHAT_ID) or int(m.from_user.id) != int(TEST_USER_ID):
            log.info("TESTPURGE: skip(reason=not_test_pair) got_chat=%s got_uid=%s", m.chat.id, m.from_user.id)
            return

        # newcomer window
        until = _newcomer_until(int(TEST_USER_ID), int(TEST_CHAT_ID))
        now = int(time.time())
        if until is None:
            log.info("TESTPURGE: skip(reason=not_approved_yet)")
            return
        if now >= int(until):
            log.info("TESTPURGE: skip(reason=outside_newcomer_window) now=%s until=%s", now, until)
            return

        # rights
        bot = m.bot
        if not await _can_delete(bot, int(TEST_CHAT_ID)):
            log.info("TESTPURGE: skip(reason=no_delete_rights)")
            return

        # delete
        try:
            await bot.delete_message(chat_id=int(TEST_CHAT_ID), message_id=int(m.message_id))
            log.info("TESTPURGE: deleted chat=%s uid=%s mid=%s now=%s until=%s", TEST_CHAT_ID, TEST_USER_ID, m.message_id, now, until)
            try:
                await _notify_admins_once(bot, m, until)
            except Exception as _e:
                try: log.warning("TESTPURGE: notify err=%r", _e)
                except Exception: pass
        except Exception:
            log.exception("TESTPURGE: delete failed chat=%s uid=%s mid=%s", TEST_CHAT_ID, TEST_USER_ID, m.message_id)

    return _purge

async def start(bot, dp, _log, cmd_router, TEST_CHAT_ID: int, TEST_USER_ID: int):
    """Entry called from app.py (soft import)."""
    try:
        # Prefer v3 direct registration
        try:
            dp.message.register(_make_handler(int(TEST_CHAT_ID), int(TEST_USER_ID)))
            log.info("TESTPURGE: handler registered via dp.message.register (v3)")
        except Exception:
            # v2 fallback (if dispatcher has decorator)
            try:
                from aiogram import Dispatcher  # type: ignore
                # best-effort attach via decorator API
                handler = _make_handler(int(TEST_CHAT_ID), int(TEST_USER_ID))
                # emulate decorator registration
                dp.register_message_handler(handler)
                log.info("TESTPURGE: handler registered (v2-fallback)")
            except Exception:
                log.exception("TESTPURGE: cannot register handler (no v3 and v2 fallback failed)")
                return
        log.info("TESTPURGE: started for chat=%s uid=%s", TEST_CHAT_ID, TEST_USER_ID)
    except Exception:
        log.exception("TESTPURGE: start failed")
