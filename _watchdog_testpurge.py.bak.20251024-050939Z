# -*- coding: utf-8 -*-
# Minimal, safe test-purge watchdog:
# - v3: direct registration via dp.message.register
# - v2: fallback handler
# - detailed logs: probe(entry), skip(reason=...), deleted, error
from __future__ import annotations

import os, time, sqlite3, asyncio, logging
from typing import Optional

try:
    # v3 types
    from aiogram import types
except Exception:
    # v2 fallback
    from aiogram import types  # type: ignore

log = logging.getLogger("support-join-guard")
_notified_once = set()  # (chat_id, user_id) already notified

async def _notify_admins_once(bot, m, until):
    \"\"\"Уведомление админам о ПЕРВОМ удалении сообщения новичка.
    Кэшируем только при УСПЕШНОЙ отправке хотя бы одному админу.
    \"\"\"
    import os, time
    global _notified_once
    try:
        _notified_once
    except NameError:
        _notified_once = {}

    cid = int(getattr(getattr(m, "chat", None), "id", 0) or 0)
    uid = int(getattr(getattr(m, "from_user", None), "id", 0) or 0)
    mid = int(getattr(m, "message_id", 0) or 0)
    key = f"notif:{cid}:{uid}"

    # Если уже уведомляли успешно — выходим
    if _notified_once.get(key):
        return

    # Можно выключить совсем через флаг
    if not _flag("NEWCOMER_NOTIFY_TO_CHAT"):
        return

    # Список админов из ENV
    raw = (os.getenv("ADMIN_IDS", "") or "").strip()
    admins = []
    for part in raw.replace(";", ",").split(","):
        part = part.strip()
        if part.isdigit():
            admins.append(int(part))
    if not admins:
        try: log.info("TESTPURGE: notify no-admins cid=%s uid=%s", cid, uid)
        except Exception: pass
        return

    # Текст — без проблемных эмодзи/суррогатов
    now = int(time.time())
    text = (f"[PURGE] Сообщение новичка удалено\n"
            f"chat: {cid}\nuser: {uid}\nmsg_id: {mid}\n"
            f"окно до: {until}\nnow: {now}")

    sent = 0
    try:
        for adm in admins:
            try:
                await bot.send_message(chat_id=int(adm), text=text, disable_notification=True)
                sent += 1
            except Exception as e:
                try: log.warning("TESTPURGE: notify fail admin=%s cid=%s uid=%s err=%r", adm, cid, uid, e)
                except Exception: pass
        if sent > 0:
            _notified_once[key] = True
            try: log.info("TESTPURGE: notify delivered cid=%s uid=%s sent=%s", cid, uid, sent)
            except Exception: pass
        else:
            try: log.info("TESTPURGE: notify no-sends cid=%s uid=%s", cid, uid)
            except Exception: pass
    except Exception as e:
        try: log.warning("TESTPURGE: notify exception err=%r", e)
        except Exception: pass

async def _can_delete(bot, chat_id: int) -> bool:
    try:
        me = await bot.get_chat_member(chat_id, (await bot.me()).id)
        # aiogram v3: attributes are similar; check both generic admin & flag
        st = getattr(me, "status", None)
        can = bool(getattr(me, "can_delete_messages", False))
        return bool(st in {"administrator", "creator"} and (can or True))
    except Exception:
        log.exception("TESTPURGE: cannot inspect delete rights chat=%s", chat_id)
        return False

def _make_handler(TEST_CHAT_ID: int, TEST_USER_ID: int):
    async def _purge(m: "types.Message"):
        # Probe
        log.info(
            "TESTPURGE: probe(entry) mid=%s uid=%s chat=%s",
            getattr(m, "message_id", None),
            getattr(getattr(m, "from_user", None), "id", None),
            getattr(getattr(m, "chat", None), "id", None),
        )

        # Sanity
        if not (m and m.chat and m.from_user):
            log.info("TESTPURGE: skip(reason=no_message_or_user_or_chat)")
            return

        # test-only gate
        if not _flag("NEWCOMER_TEST_ONLY"):
            log.info("TESTPURGE: skip(reason=test_only_flag_off)")
            return

        # pair check
        if int(m.chat.id) != int(TEST_CHAT_ID) or int(m.from_user.id) != int(TEST_USER_ID):
            log.info("TESTPURGE: skip(reason=not_test_pair) got_chat=%s got_uid=%s", m.chat.id, m.from_user.id)
            return

        # newcomer window
        until = _newcomer_until(int(TEST_USER_ID), int(TEST_CHAT_ID))
        now = int(time.time())
        if until is None:
            log.info("TESTPURGE: skip(reason=not_approved_yet)")
            return
        if now >= int(until):
            log.info("TESTPURGE: skip(reason=outside_newcomer_window) now=%s until=%s", now, until)
            return

        # rights
        bot = m.bot
        if not await _can_delete(bot, int(TEST_CHAT_ID)):
            log.info("TESTPURGE: skip(reason=no_delete_rights)")
            return

        # delete
        try:
            await bot.delete_message(chat_id=int(TEST_CHAT_ID), message_id=int(m.message_id))
            log.info("TESTPURGE: deleted chat=%s uid=%s mid=%s now=%s until=%s", TEST_CHAT_ID, TEST_USER_ID, m.message_id, now, until)
            try:
                await _notify_admins_once(bot, m, until)
            except Exception as _e:
                try: log.warning("TESTPURGE: notify err=%r", _e)
                except Exception: pass
        except Exception:
            log.exception("TESTPURGE: delete failed chat=%s uid=%s mid=%s", TEST_CHAT_ID, TEST_USER_ID, m.message_id)

    return _purge

async def start(bot, dp, _log, cmd_router, TEST_CHAT_ID: int, TEST_USER_ID: int):
    """Entry called from app.py (soft import)."""
    try:
        # Prefer v3 direct registration
        try:
            dp.message.register(_make_handler(int(TEST_CHAT_ID), int(TEST_USER_ID)))
            log.info("TESTPURGE: handler registered via dp.message.register (v3)")
        except Exception:
            # v2 fallback (if dispatcher has decorator)
            try:
                from aiogram import Dispatcher  # type: ignore
                # best-effort attach via decorator API
                handler = _make_handler(int(TEST_CHAT_ID), int(TEST_USER_ID))
                # emulate decorator registration
                dp.register_message_handler(handler)
                log.info("TESTPURGE: handler registered (v2-fallback)")
            except Exception:
                log.exception("TESTPURGE: cannot register handler (no v3 and v2 fallback failed)")
                return
        log.info("TESTPURGE: started for chat=%s uid=%s", TEST_CHAT_ID, TEST_USER_ID)
    except Exception:
        log.exception("TESTPURGE: start failed")
